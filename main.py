# main.py
import asyncio
import os
import aiohttp
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot
from ext.bybit_api import get_usdt_perpetual_symbols, get_kline_with_retries
from helpers import analyze_candles
from ext.messaging import run_message_workers, send_telegram_message
from ext.logging_config import setup_logger
from collections import defaultdict
from typing import Dict, Any, List, Optional
import logging 

class SharedState:
    def __init__(self, message_limit: int):
        self.message_limit: int = message_limit
        self.messages_sent: int = 0
        self.lock: asyncio.Lock = asyncio.Lock()
        self.limit_reached_event: asyncio.Event = asyncio.Event()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MESSAGE_LIMIT –∏ MANUAL_RUN –≤ –∫–æ–¥–µ
MESSAGE_LIMIT = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
MANUAL_RUN = os.getenv('MANUAL_RUN', 'false').lower() == 'true'  # –†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or not CHAT_ID:
    raise ValueError("BOT_TOKEN –∏ CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
setup_logger(log_file='app.log', level=logging.INFO)
logger = logging.getLogger(__name__)

async def fetch_and_analyze(
    symbol: str,
    interval_key: str,
    interval_value: str,
    session: aiohttp.ClientSession,
    signals: defaultdict,
    shared_state: SharedState
) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.

    :param symbol: –°–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    :param interval_key: –ö–ª—é—á –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15').
    :param interval_value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15m').
    :param session: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è aiohttp.
    :param signals: –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º.
    :param shared_state: –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏.
    """
    if shared_state.limit_reached_event.is_set():
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        kline_data = await get_kline_with_retries(session, symbol, interval_key, limit=7)
        if not kline_data:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval_value}.")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è —Å–≤–µ—á–µ–π
        fields = ['start', 'open', 'high', 'low', 'close', 'volume']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        candles = []
        for candle in kline_data[:-1]:
            candle_dict = dict(zip(fields, candle))
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ float
                candle_dict['open'] = float(candle_dict['open'])
                candle_dict['high'] = float(candle_dict['high'])
                candle_dict['low'] = float(candle_dict['low'])
                candle_dict['close'] = float(candle_dict['close'])
                candle_dict['volume'] = float(candle_dict['volume'])
            except ValueError as ve:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {symbol}: {ve}")
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É —Å–≤–µ—á—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π
            candles.append(candle_dict)

        logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {candles}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for candle in candles:
            if not all(key in candle for key in ['start', 'open', 'high', 'low', 'close', 'volume']):
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –≤ —Å–≤–µ—á–µ –¥–ª—è {symbol}: {candle}")
                return
            if not all(isinstance(candle[key], (int, float)) for key in ['open', 'high', 'low', 'close', 'volume']):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–≤–µ—á–µ –¥–ª—è {symbol}: {candle}")
                return

        analysis = analyze_candles(candles)

        signal = analysis.get('signal')

        if signal:
            trade_action = "SHORT" if signal == "short" else "LONG"
            signals[trade_action].append(interval_value)

    except aiohttp.ClientResponseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e.status}, {e.message}, URL: {e.request_info.url}")
    except aiohttp.ContentTypeError as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–º–≤–æ–ª–∞ {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval_value}: {e}")

async def process_symbol(
    symbol: str,
    intervals: Dict[str, str],
    session: aiohttp.ClientSession,
    semaphore: asyncio.Semaphore,
    message_queue: asyncio.Queue,
    shared_state: SharedState
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.

    :param symbol: –°–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    :param intervals: –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
    :param session: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è aiohttp.
    :param semaphore: –°–µ–º–æ—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    :param message_queue: –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param shared_state: –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏.
    """
    async with semaphore:
        if shared_state.limit_reached_event.is_set():
            return

        signals = defaultdict(list)  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {action: [intervals]}
        tasks = [
            fetch_and_analyze(symbol, interval_key, interval_value, session, signals, shared_state)
            for interval_key, interval_value in intervals.items()
        ]

        await asyncio.gather(*tasks)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not signals:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        message_lines = [f"#{symbol}"]
        for action, intervals_list in signals.items():
            if not intervals_list:
                continue
            unique_intervals = sorted(set(intervals_list), key=lambda x: ['5m', '15m', '1h', '4h', '12h', '1d'].index(x) if x in ['5m', '15m', '1h', '4h', '12h', '1d'] else len(x))
            intervals_str = ", ".join(unique_intervals)
            emoji = "üü¢" if action == "LONG" else "üî¥"
            message_lines.append(f"{emoji} {action} {intervals_str}")

        message = "\n".join(message_lines) + "\n"

        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with shared_state.lock:
            if shared_state.messages_sent >= shared_state.message_limit:
                shared_state.limit_reached_event.set()
                logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return
            shared_state.messages_sent += 1

        await message_queue.put(message)

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    is_manual_run = MANUAL_RUN
    current_time = datetime.now()
    current_minute = current_time.minute
    current_hour = current_time.hour

    intervals = {
        '5': '5m',
        '15': '15m',
        '30': '30m',
        '60': '1h',
        '240': '4h',
        '720': '12h',
    }

    if not is_manual_run:
        if current_minute % 60 == 0:
            if current_hour % 12 == 0 and current_minute == 0:
                intervals = {k: v for k, v in intervals.items() if k in ['5', '15', '30', '60', '240', '720', '1440']}
            elif current_hour % 4 == 0 and current_minute == 0:
                intervals = {k: v for k, v in intervals.items() if k in ['5', '15', '30', '60', '240']}
            else:
                intervals = {k: v for k, v in intervals.items() if k in ['5', '15', '30', '60']}
        elif current_minute % 30 == 0:
            intervals = {k: v for k, v in intervals.items() if k in ['5', '15', '30']}
        elif current_minute % 15 == 0:
            intervals = {k: v for k, v in intervals.items() if k in ['5', '15']}
        elif current_minute % 5 == 0:
            intervals = {k: v for k, v in intervals.items() if k in ['5']}
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.")
            return

    MAX_CONCURRENT_TASKS = 50
    MAX_WORKERS = 15
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)
    message_queue = asyncio.Queue()

    shared_state = SharedState(message_limit=MESSAGE_LIMIT)

    async with aiohttp.ClientSession() as session:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        excluded_symbols = {'USDCUSDT', 'FDUSDUSDT'}

        # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –∏—Ö
        symbols = await get_usdt_perpetual_symbols(session)
        symbols = [symbol for symbol in symbols if symbol.upper() not in excluded_symbols]

        if not symbols:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ main
            async with Bot(token=BOT_TOKEN) as bot:
                await send_telegram_message(bot, CHAT_ID, "‚ùå –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç.", logger)
            return

        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∏–º–≤–æ–ª–µ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∏–∂–µ
        # if len(symbols) >= 10:
        #     test_symbol = symbols[9]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
        #     symbols = [test_symbol]
        #     logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª–µ: {test_symbol}")
        # else:
        #     logger.warning("–í —Å–ø–∏—Å–∫–µ —Å–∏–º–≤–æ–ª–æ–≤ –º–µ–Ω—å—à–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª.")
        #     symbols = [symbols[0]]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ main –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        async with Bot(token=BOT_TOKEN) as bot:
            # –ó–∞–ø—É—Å–∫–∞–µ–º **–æ–¥–Ω—É** —Ñ—É–Ω–∫—Ü–∏—é run_message_workers, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—Å—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
            worker_task = asyncio.create_task(
                run_message_workers(
                    bot,
                    CHAT_ID,
                    message_queue,
                    logger,
                    max_workers=MAX_WORKERS
                )
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–æ–≤
            tasks = [
                process_symbol(symbol, intervals, session, semaphore, message_queue, shared_state)
                for symbol in symbols
            ]

            await asyncio.gather(*tasks)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è "EXIT" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            for _ in range(MAX_WORKERS):
                await message_queue.put("EXIT")

            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
            await worker_task

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    setup_logger(log_file='app.log', level=logging.INFO)
    asyncio.run(main())
